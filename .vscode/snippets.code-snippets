{
  // Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "Print to console": {
    "prefix": ["clog"],
    "body": ["console.log('$1', $1)"],
    "description": "Log output to console with name"
  },
  "Pretty print to console": {
    "prefix": ["jslog"],
    "body": ["console.log('$1', JSON.stringify($1, null, 2))"],
    "description": "Log output to console with name"
  },
  "Parse to console": {
    "prefix": ["jplog"],
    "body": ["console.log('$1', JSON.parse($1))"],
    "description": "Log output to console with name"
  },
  "Error handling boilerplate": {
    "prefix": ["cerr"],
    "body": ["if ($1) {", "console.error($1);", "throw new Error('$2')", "}"]
  },
  "More error handling boilerplate": {
    "prefix": ["serr"],
    "body": [
      "if ($1Err) {",
      "const errorMessage = '$2';",
      "await sendError(event, errorMessage, $1Err);",
      "throw new Error(errorMessage);",
      "}",
      "if (!$1) {",
      "const errorMessage = '$3';",
      "await sendError(event, errorMessage);",
      "throw new Error(errorMessage);",
      "}"
    ]
  }
}
